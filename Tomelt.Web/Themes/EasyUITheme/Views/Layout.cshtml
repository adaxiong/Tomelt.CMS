@using Tomelt.UI.Resources;
@{
    //首先大致讲讲页面的呈现原理
    //1.根据MVC模型的特性页面上所有的数据都是Model，整个页面的Model是一个动态类型
    //2.页面中的区域是动态类型中的属性，其本身也是一个动态类型。
    //3.区域中又可添加若干动态类型属性。如：插入一些小部件，呈现模块内容等等。
    //4.这些动态类型在页面上都用@Display(x)去呈现，Orchard会根据动态类型中的内容去找相应呈现模板。
    //5.呈现模板通常和动态类型的名称同名。
  
    //注册样式文件，默认调用主题Styles目录的文件
    Style.Include("site.css");

    //Zone是Display的别名，帮助我们理解这个地方是显示一个区域的。
    //在页面中新增一个区域，只用@Zone(Model.区域名)即可
    Func<dynamic, dynamic> Zone = x => Display(x);
    
    //向特定区域插入一些固定的主题小零件
    //这些小零件都是一些动态类型，在呈现的时候Orchard会自动查找和这些动态类型同名的模板文件
    WorkContext.Layout.Header.Add(New.Logo(), "5");         //在页眉区域插入网站标题
    WorkContext.Layout.Navigation.Add(New.User(), "5");     //在菜单区域插入登录链接(这个就用的是Orchard.Core中的文件没有重写它，位置在：Orchard.Core\Shapes\Views\User.cshtml)
    WorkContext.Layout.Footer.Add(New.Copyright(), "5");    //在页脚区域插入版权申明
    
}

<div class="warp">
  <!--页眉区域-->
  @if (Model.Header != null)
  {
    <div class="head">@Zone(Model.Header)</div>
  }
  <!--Orchard中菜单是默认加到Navigation区域的-->
  @if (Model.Navigation != null)
  { 
  <div class="nav">
    @Zone(Model.Navigation)
  </div>
  }
  <div class="main">
    <div class="mainleft">
      @* 左侧功能区域，可用于添加Widget。 *@
      @if (Model.AsideLeft != null) {
      <div id="aside-left">
        @Zone(Model.AsideLeft)
      </div>
      }
    </div>
    <div class="mainright">
      @* 消息区域，Orchard默认展现消息的地方。 *@
      @if (Model.Messages != null) {
      <div id="messages">
          @Zone(Model.Messages)
      </div>
      }
      @* 内容区域，Orchard默认展现内容的地方。 *@
      @if (Model.Content != null) {
      <div id="content" class="group">
          @Zone(Model.Content)
      </div>
      }
    </div>
    <div class="clear"></div>
  </div>
  @if (Model.Header != null)
  { 
	<div class="foot">
    @Zone(Model.Footer)
  </div>
  }
</div>
